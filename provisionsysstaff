#! /usr/bin/env bash

# Print some info if the user uses "-h" in their command
usage()
{
cat <<EOF

Usage:
    ./provisionsysstaff

    -h     Show the Help menu for provisionsysstaff

    Description:
    This tool is designed to fully provision a machine for use at
    the lcsee systems office. It is written to remote connect to
    the machine and provision it with Ansible using our playbooks.
    This script makes use of Zenity for most of its user interaction.
    
EOF
}

# Print help if -h specified
[ "${1}" == "-h" ] && usage && exit 0

########################################
# Checking to see if the user has their ssh keys loaded
keys(){
    if [ "$(ssh-add -L | grep "The agent has no identities.")" == "The agent has no identities." ]; then
	tput setaf 1;echo "Please load your SSH keys before running this script"; tput sgr0
    else
	tput setaf 2;echo "Your SSH Keys have been successfully loaded"; tput sgr0
    fi
}
#########################################

#########################################
# Getting the name of the machine that the user would like to provision
get_machine_name(){

    machine_name=$(zenity --entry --title "Ansible Provisioning?" --text="Enter an IP that you would like to provision" --entry-text "IP Address")
}
#tput setaf 3;echo "Provisioning the machine of your choice"; tput sgr0

#########################################

#########################################
# Warning the user that they need to have the name of the machine that they wish to provision in their /etc/ansible/hosts file
throw_warning(){
    zenity --warning --title "Make sure you add this line!" --text 'echo "machinename ansible_connection=ssh" > /etc/ansible/hosts '
}
#########################################

########################################
# Removing the host keys warning
remove_known_hosts(){
    ssh-keygen -f "/home/cumorris/.ssh/known_hosts" -R ${machine_name} >> /dev/null
}
#########################################

#########################################
# Getting the loud-ubuntu-ansible playbooks from webgit and running them on the machine that is being provisioned
get_loud_playbook(){
    cd /tmp
    git archive --remote git@webgit.lcseecloud.net:ubuntu/loud-ubuntu-ansible.git --format tar --prefix=loud-ubuntu-ansible/ master | sudo tar xvf -
    cd ~/
}

run_loud_playbook(){
    #echo "Starting the LOUD provisioning of machine"
    cd /tmp/loud-ubuntu-ansible
    sudo sed -i "s/localhost/${machine_name}/g" loudify.yml
    ansible-playbook loudify.yml 
    #tput setaf 2;echo "The machine has been provisioned with loud"; tput sgr0
    cd ~/
    echo " "
} 
##########################################

##########################################
# Getting the playbook for lcsee-ubuntu-ansible and running that on the machine that is being provisioned
get_lcsee_playbook(){
    cd /tmp
    git archive --remote git@webgit.lcseecloud.net:ubuntu/lcsee-ubuntu-ansible.git --format tar --prefix=lcsee-ubuntu-ansible/ master | sudo tar xvf -
    cd ~/
}

run_lcsee_playbook(){
    cd /tmp/lcsee-ubuntu-ansible
    sudo sed -i "s/localhost/${machine_name}/g" lcsee-sysstaff.yml
    ansible-playbook lcsee-sysstaff.yml
    cd ~/
    #tput setaf 2;echo "The machine has been provisioned with lcsee"; tput sgr0
    echo " "
}
##########################################

#########################################
# Rebooting the machine so the playbooks can take effect
reboot_machine(){
    tput setaf 3;echo "restarting machine"; tput sgr0
    ssh -A -o stricthostkeychecking=no cumorris@$machine_name 'sudo reboot'

    RESULT_4=$?
    if [ $RESULT_4 -eq 1 ]; then
	tput setaf 1;echo "unable to reboot the machine - Something in the lcsee or loud playbooks may have broke this"; tput sgr0
	tput setaf 1;echo "I cannot continue, you're on your own br0"; tput sgr0
	echo " "
	exit
    
else
    tput setaf 2;echo "Machine reboot complete";tput sgr0
    
fi

    tput setaf 6;echo "Provisioning complete"; tput sgr0
exit
}
#########################################


echo " "
tput setaf 4;echo "########################################"; tput sgr0
keys
tput setaf 4;echo "########################################"; tput sgr0
echo " "

echo " "
tput setaf 4;echo "########################################"; tput sgr0
get_machine_name >> /dev/null
tput setaf 3;echo "Provisioning the machine of your choice"; tput sgr0
tput setaf 4;echo "########################################"; tput sgr0
echo " " 

echo " "
tput setaf 4;echo "########################################"; tput sgr0
throw_warning >> /dev/null
tput setaf 4;echo "########################################"; tput sgr0
echo " " 

echo " "
tput setaf 4;echo "########################################"; tput sgr0
tput setaf 3;echo "Removing the machine to known hosts"; tput sgr0
remove_known_hosts >> /dev/null
tput setaf 2;echo "Machine has been removed from known hosts"; tput sgr0
tput setaf 4;echo "########################################"; tput sgr0
echo " " 

echo " "
tput setaf 4;echo "########################################"; tput sgr0
tput setaf 3;echo "Getting the LOUD playbook"; tput sgr0
get_loud_playbook >> /dev/null
tput setaf 2;echo "The LOUD playbook has been downloaded"; tput sgr0
tput setaf 4;echo "########################################"; tput sgr0
echo " " 

echo " "
tput setaf 4;echo "########################################"; tput sgr0
tput setaf 3;echo "Starting the LOUD provisioning of machine"; tput sgr0
run_loud_playbook >> /dev/null
tput setaf 2;echo "The machine has been provisioned with loud"; tput sgr0
tput setaf 4;echo "########################################"; tput sgr0
echo " " 

echo " "
tput setaf 4;echo "########################################"; tput sgr0
tput setaf 3;echo "Getting the LCSEE playbook"; tput sgr0
get_lcsee_playbook >> /dev/null
tput setaf 2;echo "The LCSEE playbook has been downloaded"; tput sgr0
tput setaf 4;echo "########################################"; tput sgr0
echo " "

echo " "
tput setaf 4;echo "########################################"; tput sgr0
tput setaf 3;echo "Starting the LCSEE provisioning of machine"; tput sgr0
run_lcsee_playbook >> /dev/null
tput setaf 2;echo "The machine has been provisioned with lcsee"; tput sgr0
tput setaf 4;echo "########################################"; tput sgr0
echo " " 

tput setaf 4;echo "########################################"; tput sgr0
reboot_machine 
tput setaf 4;echo "########################################"; tput sgr0


# Ending "fi" from the ssh-keys if statement
#fi
